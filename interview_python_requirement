
Pythin is must

  - Please tell me about yourself 
  - Where would you like to see yourself after 5 years ?

  With Practical Written Code 
  • Python Skills   
    * Oops Concept
        Class
        Objects
        Polymorphism
        Encapsulation
        Inheritance
    * Write Sample Coding based on Polymorphism, 
    * Do you think Python is case sensitive language ?
    * Error/Exception handling ?

  • Knowledge on 
    OOPS,                                              https://www.geeksforgeeks.org/python-oops-concepts/
    Multi-Threading,                                   https://www.geeksforgeeks.org/multithreading-python-set-1/
    Collection, 
    File Handling,                                     https://www.geeksforgeeks.org/file-handling-python/
    Database Connectivity depending on the language candidate knows.    

  • MySQL 
    * table structure, table creation, inner joins, unions, count, select etc.
	* diff b/w delete vs truncate
	* Schema 
	* Views
	* Procedures
	* Indexing
	* Optimiization {buffer pool size, indexing, sp}
	* DB connectivity with Java or Python
	
	
	
Python Interview questions 

* Python vs. Java

Java is a statically typed and compiled language, and Python is a dynamically typed and interpreted language. 
This single difference makes Java faster at runtime and easier to debug, but Python is easier to use and easier to read.
Java is faster than python because it determines data types at compilation and python at run time.
- Framework	
Compare to JAVA, Python has lower number of Frameworks. Popular ones are DJango, Flask.	
Java has large number of Frameworks. Popular ones are Spring, Hibernate, etc.

- Databases	
Python’s database access layers are weaker than Java’s JDBC. This is why it rarely used in enterprises.	
(JDBC)Java Database Connectivity is most popular and widely used to connect with database.


1. What is Python?
Python is a high-level, interpreted, general-purpose programming language. Being a general-purpose language, 
it can be used to build almost any type of application with the right tools/libraries. Additionally, python supports objects,
modules, threads, exception-handling, and automatic memory management which help in modeling real-world problems and building applications to solve these problems

3. What is a dynamically typed language?
•	Static - Data Types are checked before execution.
•	Dynamic - Data Types are checked during execution.

4. How do you display the type of a varible
Using type(a)
	
	
12. What is self in Python?
Self is a keyword in Python used to define an instance of an object of a class. In Python, it is explicitly used as the first parameter,
unlike in Java where it is optional. It helps in distinguishing between the methods and attributes of a class from its local variables.


7. What are lists and tuples? What is the key difference between the two?
Lists and Tuples are both sequence data types that can store a collection of objects in Python. 
The objects stored in both sequences can have different data types. Lists are represented with square brackets ['sara', 6, 0.19], 
while tuples are represented with parantheses ('ansh', 5, 0.97).
But what is the real difference between the two? The key difference between the two is that while lists are mutable, 
tuples on the other hand are immutable objects. This means that lists can be modified, appended or sliced on the go but tuples remain
constant and cannot be modified in any manner.


13. What is __init__?
__init__ is a contructor method in Python and is automatically called to allocate memory when a new object/instance is created. 
All classes have a __init__ method associated with them. It helps in distinguishing methods and attributes of a class from local variables.


17. What is slicing in Python?
•	As the name suggests, ‘slicing’ is taking parts of.
•	Syntax for slicing is [start : stop : step]
•	start is the starting index from where to slice a list or tuple
•	stop is the ending index or where to sop.
•	step is the number of steps to jump.
•	Default value for start is 0, stop is number of items, step is 1.
•	Slicing can be done on strings, arrays, lists, and tuples.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(numbers[1 : : 2])  #output : [2, 4, 6, 8, 10]


19. What is the difference between Python Arrays and lists?
•	Arrays in python can only contain elements of same data types i.e., data type of array should be homogeneous. 
It is a thin wrapper around C language arrays and consumes far less memory than lists.
•	Lists in python can contain elements of different data types i.e., data type of lists can be heterogeneous. 
It has the disadvantage of consuming large memory.


24. What are Dict and List comprehensions?
Python comprehensions, like decorators, are syntactic sugar constructs that help build altered and filtered lists, dictionaries
or sets from a given list, dictionary, or set. Using comprehensions saves a lot of time and code that might be considerably more 
verbose (containing more lines of code). Let's check out some examples, where comprehensions can be truly beneficial:
•	Performing mathematical operations on the entire list
my_list = [2, 3, 5, 7, 11]
squared_list = [x**2 for x in my_list]    # list comprehension
# output => [4 , 9 , 25 , 49 , 121]
squared_dict = {x:x**2 for x in my_list}    # dict comprehension
# output => {11: 121, 2: 4 , 3: 9 , 5: 25 , 7: 49}
•	Performing conditional filtering operations on the entire list
my_list = [2, 3, 5, 7, 11]
squared_list = [x**2 for x in my_list if x%2 != 0]    # list comprehension
# output => [9 , 25 , 49 , 121]
squared_dict = {x:x**2 for x in my_list if x%2 != 0}    # dict comprehension
# output => {11: 121, 3: 9 , 5: 25 , 7: 49}

25. Can we add a list/tuple in dictionary as a key or value or both ?
Yes we can
 


Basic Programs 

1.	Program to swap two numbers without using temp variable 
A=5
B=7
A,B=B,A

2.	Factorial of a number.

def factorial(n):
	
	# single line to find factorial
	return 1 if (n==1 or n==0) else n * factorial(n - 1);

# Driver Code
num = 5;
print("Factorial of",num,"is",
factorial(num))


3.	Nth number in Fibonacci series.

def Fibonacci(n):
	if n<= 0:
		print("Incorrect input")
	# First Fibonacci number is 0
	elif n == 1:
		return 0
	# Second Fibonacci number is 1
	elif n == 2:
		return 1
	else:
		return Fibonacci(n-1)+Fibonacci(n-2)

# Driver Program

print(Fibonacci(10))






4.	Prime number

num = 11

if num > 1:

	# Iterate from 2 to n / 2
	for i in range(2, int(num/2)+1):

		# If num is divisible by any number between
		# 2 and n / 2, it is not prime
		if (num % i) == 0:
			print(num, "is not a prime number")
			break
	else:
		print(num, "is a prime number")

else:
	print(num, "is not a prime number")




Output Questions 
1.
a = 4.5
b= 2
print (a//b)



2.
a = True
b = False
c = False

if a or b and c:
	print ("XORIANT")
else:
	print ("xoriant")



3.
for i in range(20):
    if i//4==0:
        print(i)



4.
tuple1 = tuple([1, 2, 3, 4, 5])
print("First element of tuple")
print(tuple1[0])
print(tuple1[-1])
print(tuple1[-3])






Solutions
1. 2.0
2. XORIANT
3. 0 
   1
   2 
   3
4. 1 5 3


